import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Load environment variables
const supabaseUrl = 'https://blzcjafcncgghwnmuxhl.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJsemNqYWZjbmNnZ2h3bm11eGhsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUxMjg1MjQsImV4cCI6MjA3MDcwNDUyNH0.NUQZ4OEcm06tJBYk7U0jC0i22BXf6kL2CjATdxsZIUs';

const supabase = createClient(supabaseUrl, supabaseKey);

async function createTables() {
  try {
    console.log('Creating assignment_plans table...');
    
    // Create assignment_plans table
    const createAssignmentPlansTable = `
      CREATE TABLE IF NOT EXISTS public.assignment_plans (
        id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        assignment_id BIGINT NOT NULL REFERENCES public.assignments(id) ON DELETE CASCADE,
        original_instructions TEXT NOT NULL,
        sub_tasks JSONB DEFAULT '[]'::jsonb,
        created_at TIMESTAMPTZ DEFAULT NOW(),
        updated_at TIMESTAMPTZ DEFAULT NOW()
      );
    `;
    
    let { error } = await supabase.rpc('exec_sql', { query: createAssignmentPlansTable });
    if (error) {
      console.log('Trying direct SQL execution...');
      // Try with direct SQL execution (this might not work with anon key)
      const response = await fetch(`${supabaseUrl}/rest/v1/rpc/exec_sql`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${supabaseKey}`,
          'apikey': supabaseKey
        },
        body: JSON.stringify({ query: createAssignmentPlansTable })
      });
      
      if (!response.ok) {
        console.error('Failed to create assignment_plans table:', await response.text());
      } else {
        console.log('assignment_plans table created successfully');
      }
    } else {
      console.log('assignment_plans table created successfully');
    }

    console.log('Creating sub_tasks table...');
    
    // Create sub_tasks table
    const createSubTasksTable = `
      CREATE TABLE IF NOT EXISTS public.sub_tasks (
        id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        plan_id BIGINT NOT NULL REFERENCES public.assignment_plans(id) ON DELETE CASCADE,
        step_number INTEGER NOT NULL,
        title TEXT NOT NULL,
        generated_prompt TEXT NOT NULL,
        description TEXT,
        estimated_hours DECIMAL(5,2) DEFAULT 1.0,
        status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'in_progress', 'completed')),
        due_date TIMESTAMPTZ,
        order_index INTEGER NOT NULL DEFAULT 0,
        created_at TIMESTAMPTZ DEFAULT NOW()
      );
    `;
    
    ({ error } = await supabase.rpc('exec_sql', { query: createSubTasksTable }));
    if (error) {
      console.error('Failed to create sub_tasks table:', error);
    } else {
      console.log('sub_tasks table created successfully');
    }

    console.log('All tables created successfully!');
    
  } catch (error) {
    console.error('Error creating tables:', error);
  }
}

createTables();